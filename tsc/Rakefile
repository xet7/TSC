# -*- coding: utf-8; mode: ruby -*-
#############################################################################
# Rakefile  -  Rake instruction file
#
# Copyright © 2013-2014 The TSC Contributors
#############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require "rake"
require "rake/clean"
require "pathname"

CLOBBER.include("build", "crossbuild", "docs/scripting/html", "docs/scripting/rdoc", "docs/api")

str = File.read("CMakeLists.txt", :encoding => "utf-8")
TSC_VERSION_MAJOR = str.match(/^set\(TSC_VERSION_MAJOR (\d+)\)/)[1]
TSC_VERSION_MINOR = str.match(/^set\(TSC_VERSION_MINOR (\d+)\)/)[1]
TSC_VERSION_PATCH = str.match(/^set\(TSC_VERSION_PATCH (\d+)\)/)[1]

TSC_SOURCE_FILES = FileList["src/**/*.cpp"] + FileList["src/**/*.hpp"]

# This is called from CMake for generating the credits file.
rule %r{credits.cpp} => ["docs/authors.txt", "docs/specialthanks.txt"] do |t|
  puts "Converting docs/authors.txt and docs/specialthanks.txt to C++ source file"

  File.open(t.name, "w:utf-8") do |f|
    # Write first part
    f.puts(%Q!#include "#{Dir.pwd}/src/core/global_game.hpp"
#include "#{Dir.pwd}/src/core/main.hpp"

namespace TSC {

	const std::string g_credits = "\\\n!)

    File.open("docs/authors.txt", "r:utf-8") do |f2|
      # Skip to real content
      loop do
        line = f2.gets
        break if line.start_with?("=-=-=-")
      end
      f2.gets

      # Write out the remaining part to the cpp file
      while (line = f2.gets)
        f.write(line.chomp.gsub(/<.*>/, "").strip) # Remove email address
        f.puts("\\n\\")
      end
    end

    f.puts("\\n\\")
    f.puts("-- Special Thanks --\\n\\")
    f.puts("\\n\\")

    File.open("docs/specialthanks.txt", "r:utf-8") do |f2|
      # Skip to real content
      loop do
        line = f2.gets
        break if line.start_with?("=-=-=-")
      end
      f2.gets

      # Write out the remaining part to the cpp file
      while (line = f2.gets)
        f.write(line.chomp.gsub(/<.*>/, "").strip) # Remove email address
        f.puts("\\n\\")
      end
    end

    # Write final part
    f.write("\";\n}\n")
  end
end

# Note that strictly the .po files depend on the .pot file, but
# the .pot file should only ever be updated on purpose and not
# as part of updating the .po files, as it is the reference file
# for all translators and thus must stay the same. Changes in it
# require all translators to review their translation. Therefore
# this task is not a file task on the .pot file; the .po files
# depend on the .pot file, and it would be autocalled that way.
desc "Generate the 'Secret Maryo Chronicles.pot' base PO template file."
task :potfile do
  # UTF8_() should go away.

  sourcefiles = TSC_SOURCE_FILES.map{|path| Pathname.new(path).expand_path.relative_path_from(Pathname.new("data/translations").expand_path)}
  cd "data/translations" do
    sh %Q<xgettext --add-comments="TRANS:" --language=C++ --escape --from-code=UTF-8 --keyword=_ --keyword=N_ --keyword=UTF8_ --keyword=PL_:1,2 --keyword=C_:1c,2 --copyright-holder='The TSC Contributors' --package-name='Secretchronicles' #{sourcefiles.map(&:to_s).join(' ')} -o "Secretchronicles.pot">
  end
end

desc "Check the PO files for errors."
task :checkpo do
  cd "data/translations" do
    Dir["*.po"].sort.each do |pofile|
      sh "msgfmt -o /dev/null -c --statistics #{pofile}"
    end
  end
end

# This task is intended to be called by translators that want to bring
# their .po file up to date with the .pot file.
rule %r{.po$} => "data/translations/Secretchronicles.pot" do |t|
  sh "msgmerge -U #{Rake.original_dir}/#{t.name} '#{t.source}'"
end

desc "Generate the documentation in the directory htmldocs/."
task :docs => ["docs:doxygen", "docs:scripting_core_docs", "docs:scripting_ssl_docs"]

desc "Create source tarball."
task :tarball => :clobber do
  version = ENV["VERSION"] || "#{TSC_VERSION_MAJOR}.#{TSC_VERSION_MINOR}.#{TSC_VERSION_PATCH}"
  puts "Packaging TSC version #{version}"
  sleep 1

  sh "git submodule init"
  sh "git submodule update"

  project_dir = File.expand_path(File.join(File.dirname(__FILE__), ".."))
  cd "../.." do
    ln_s project_dir, "TSC-#{version}" unless File.exist?("TSC-#{version}")
    sh "tar --exclude .git --exclude drafts -cvJhf TSC-#{version}.tar.xz TSC-#{version}"
    rm "TSC-#{version}"
  end
end

desc "Create all files necessary for a release."
task :release do
  version = ENV["VERSION"] || "#{TSC_VERSION_MAJOR}.#{TSC_VERSION_MINOR}.#{TSC_VERSION_PATCH}"
  prerelease = version.include?("-")
  puts "Building release files for TSC version #{version}"

  if prerelease
    puts "This is a prerelease version."
  else
    print "This is the FINAL version. Are you sure you want to continue (y/n)? "
    fail "Aborted by user" unless $stdin.gets.chomp.downcase == "y"
  end

  if ENV["TSCSIGNKEY"]
    gpgkey = ENV["TSCSIGNKEY"].strip
  else
    puts "$TSCSIGNKEY is unset! Please specify your GPG key to use for"
    puts "signing the source package."
    print "GPG Key ID: "
    gpgkey = $stdin.gets.chomp

    if gpgkey.empty?
      raise "No GPG key specified. Exiting."
    end
  end

  if ENV["TSCCROSSCOMPILEPATH"]
    crosspath = ENV["TSCCROSSCOMPILEPATH"]
  else
    puts "$TSCCROSSCOMPILEPATH is unset. Please specify the value for the $PATH"
    puts "variable to use when crosscompiling for Windows."
    print "$PATH: "
    crosspath = $stdin.gets.chomp

    if crosspath.empty?
      puts "No extra crosspath specified. Assuming regular $PATH works."
      crosspath = ENV["PATH"]
    end
  end

  if ENV["TSCTARGETPATH"]
    targetpath = ENV["TSCTARGETPATH"]
  else
    puts "$TSCTARGETPATH is unset. /tmp/tsc-release will be used instead."
    print "Is that ok? (y/n) "
    if $stdin.gets.chomp.downcase != "y"
      raise "$TSCTARGETPATH unset and default rejected."
    else
      targetpath = "/tmp/tsc-release"
    end
  end

  source_tarball = File.join(Dir.pwd, "..", "..", "TSC-#{version}.tar.xz")

  unless File.file?(source_tarball)
    raise "Something went wrong. There is no source tarball at '#{source_tarball}'. You should run `$ rake tarball' probably?"
  end

  mkdir targetpath
  cd targetpath  do
    # First create the native build. While not required strictly for releasing,
    # this ensures the code compiles.
    mkdir "native"
    cd "native" do
      sh "tar -xJf '#{source_tarball}'"
      cd "TSC-#{version}/tsc" do
        mkdir "build"
        cd "build" do
          sh "cmake #{prerelease ? '-DCMAKE_BUILD_TYPE=Debug' : '-DCMAKE_BUILD_TYPE=Release'} -DCMAKE_INSTALL_PREFIX=#{Dir.pwd}/testinstall .."
          sh "make -j#{`nproc`.strip}"
          sh "make install"

          puts ">>>>> Running the game now. Test a bit and close when you are satisfied. <<<<<"
          print "Press [ENTER] to start"
          $stdin.gets
          sh "#{Dir.pwd}/testinstall/bin/tsc"
        end
      end
    end

    # Now create the Windows setup installer
    mkdir "win32"
    cd "win32" do
      sh "tar -xJf '#{source_tarball}'"
      cd "TSC-#{version}/tsc" do
        mkdir "crossbuild"
        cd "crossbuild" do
          puts "Adjusting $PATH for crosscompiling to '#{crosspath}'"
          ENV["PATH"] = crosspath

          cp "../cmake/toolchains/linux2mingw32.cmake", "."
          sh "cmake #{prerelease ? '-DCMAKE_BUILD_TYPE=Debug' : '-DCMAKE_BUILD_TYPE=Release'} -DCMAKE_TOOLCHAIN_FILE=linux2mingw32.cmake .."
          sh "make -j#{`nproc`.strip}"
          sh "i686-pc-mingw32-strip -x tsc.exe"
          sh "cpack -G NSIS"
        end
      end
    end

    mkdir "files"
    cd "files" do
      # Collect the files
      cp source_tarball, "."
      cp "../win32/TSC-#{version}/tsc/crossbuild/TSC-#{TSC_VERSION_MAJOR}.#{TSC_VERSION_MINOR}.#{TSC_VERSION_PATCH}-win32.exe", "TSC-#{version}-win32.exe"

      tarballfile = File.basename(source_tarball)
      win32exefile = "TSC-#{version}-win32.exe"

      # Sign them
      sh "gpg --local-user #{gpgkey} --detach-sign #{tarballfile}"
      sh "gpg --local-user #{gpgkey} --detach-sign #{win32exefile}"

      # Generate checksums
      sh "md5sum #{tarballfile} #{win32exefile} > TSC-#{version}.md5sums"
      sh "sha256sum #{tarballfile} #{win32exefile} > TSC-#{version}.sha256sums"

      puts
      sh "ls -hl"
    end
  end

  puts "===== DONE ====="
  puts "All files required for releasing are in #{targetpath}/files."
  puts "Don’t forget to add a signed Git tag (-s or -u option) to the repository."
end

# Ensure :clobber also wipes out mruby build content
task :clean_mruby do
  cd "../mruby/mruby" do
    sh "rake clean"
    rm_rf "build"
  end
end

task :clean_ssl do
  rm_rf "docs/ssl"
end

task :clobber => [:clean_mruby, :clean_ssl]

desc "Run optipng on all PNG graphics to cut size down."
task :optipng do
  pngs = Dir["data/pixmaps/**/*.png"].sort

  # Ensure we have optipng available
  optipng = `which optipng`.strip
  fail "optipng not available" if optipng.empty?

  total_size = pngs.reduce(0){|sum, path| sum + File.size(path)}
  puts "Current total size of all PNGs: #{bytesize(total_size)}"

  # Ensure we use all the CPU cores available. This takes far
  # too long otherwise.
  mutex = Mutex.new
  commands = pngs.map{|path| [optipng, "-q", "-o4", "--", path]}
  threads = []
  `nproc`.to_i.times do |i|
    threads << Thread.new do
      loop do
        cmd = mutex.synchronize{commands.pop}
        break if cmd.nil?

        print "[#{i}] "
        puts cmd.join(" ")
        system(*cmd)
      end
    end
  end
  threads.each(&:join)

  new_total_size = pngs.reduce(0){|sum, path| sum + File.size(path)}
  puts "Old total size of all PNGs: #{bytesize(total_size)}"
  puts "New total size of all PNGs: #{bytesize(new_total_size)}"
  puts "Reduction in size thus is:  #{bytesize(total_size - new_total_size)}"
end

########################################
# Helper methods

def bytesize(bytes)
  if bytes < 1024
    "#{bytes} B"
  elsif bytes < 1024 * 1024
    "#{bytes / 1024}kB #{bytes % 1024} B"
  elsif bytes < 1024 * 1024 * 1024
    kb = bytes / 1024
    bytes = bytes % 1024
    mib = kb / 1024
    kb = kb % 1024
    "#{mib} MiB #{kb} kB #{bytes} B"
  elsif bytes < 1024 * 1024 * 1024
    kb = bytes / 1024
    bytes = bytes % 1024
    mib = kb / 1024
    kb = kb % 1024
    gib = mib / 1024
    mib = mib % 1024
    "#{gib} GiB #{mib} MiB #{kb} kB #{bytes} B"
  else # Some large number
    "#{bytes} B"
  end
end
